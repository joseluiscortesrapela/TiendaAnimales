<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="pbBuscador.Image" type="System.Drawing.Bitmap, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        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
</value>
  </data>
</root>